generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String                 @unique
  emailVerified            DateTime?
  image                    String?
  role                     UserRole               @default(STUDENT)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  university               String?
  major                    String?
  graduationYear           Int?
  skills                   String[]
  companyName              String?
  companySize              String?
  industry                 String?
  bio                      String?
  goal                     String[]
  location                 String?
  mena                     Boolean?
  subjects                 String?
  terms                    Boolean?
  whatsapp                 String?
  applicationsThisMonth    Int                    @default(0)
  applicationsThisWeek     Int                    @default(0)
  calendlyLink             String?
  companyGoals             String[]
  companyOneLiner          String?
  companyRole              String?
  companyWebsite           String?
  contactEmail             String?
  contactPersonName        String?
  contactPersonType        String?
  contactWhatsapp          String?
  dateOfBirth              DateTime?
  documentsAllowed         Int                    @default(1)
  education                String?
  highSchool               String?
  interests                String[]
  lastApplicationReset     DateTime               @default(now())
  lastMonthlyReset         DateTime               @default(now())
  linkedin                 String?
  profileCompleted         Boolean                @default(false)
  referralSource           String?
  referralDetails          String?
  emailVerifiedAt          DateTime?
  profileCompletedAt       DateTime?
  roleSelectedAt           DateTime?
  firstLoginAt             DateTime?
  lastActiveAt             DateTime?
  firstProjectViewAt       DateTime?
  firstApplicationAt       DateTime?
  firstProjectCreatedAt    DateTime?
  firstProjectActivatedAt  DateTime?
  subscriptionUpgradedAt   DateTime?
  signupSource             String?
  signupMedium             String?
  signupCampaign           String?
  deviceType               String?
  browserInfo              String?
  ipCountry                String?
  timezone                 String?
  sessionCount             Int                    @default(0)
  totalTimeSpent           Int                    @default(0)
  onboardingStepsCompleted String[]               @default([])
  featuresUsed             String[]               @default([])
  stripeCurrentPeriodEnd   DateTime?
  stripeCustomerId         String?                @unique
  stripePriceId            String?
  stripeSubscriptionId     String?                @unique
  subscriptionPlan         SubscriptionPlan       @default(FREE)
  subscriptionStatus       SubscriptionStatus     @default(ACTIVE)
  aiMatches                AIMatch[]
  accounts                 Account[]
  applications             Application[]
  applicationAnalytics     ApplicationAnalytics[]
  applicationSessions      ApplicationSession[]
  behavioralInsights       BehavioralInsight[]
  chatQueries              ChatQuery[]
  companySearches          CompanySearch[]
  externalApplications     ExternalApplication[]
  pageViews                PageView[]
  payments                 Payment[]
  projects                 Project[]
  sessions                 Session[]
  userSessions             UserSession[]
}

model UserSession {
  id          String    @id @default(cuid())
  userId      String
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int?
  pageViews   Int       @default(0)
  deviceType  String?
  browserInfo String?
  ipAddress   String?
  userAgent   String?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startTime])
}

model PageView {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  page      String
  timestamp DateTime @default(now())
  timeSpent Int?
  referrer  String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([page])
  @@index([timestamp])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                  String               @id @default(cuid())
  title               String
  description         String
  companyId           String
  status              ProjectStatus        @default(PENDING_APPROVAL)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  adminFeedback       String?
  applicationDeadline DateTime?
  approvedAt          DateTime?
  approvedBy          String?
  category            ProjectCategory?
  compensation        String?
  paymentAmount       Float?
  currentApplications Int?                 @default(0)
  deliverables        String[]             @default([])
  department          String?
  duration            String?
  durationMonths      Int?                 @default(3)
  experienceLevel     String?              @default("High School")
  featured            Boolean              @default(false)
  isPremium           Boolean              @default(false)
  learningOutcomes    String[]             @default([])
  location            String?
  maxApplications     Int?                 @default(100)
  projectType         String?
  remote              Boolean              @default(false)
  requirements        String[]             @default([])
  skillsRequired      String[]             @default([])
  subcategory         String?
  teamSize            Int?                 @default(1)
  timeCommitment      String?              @default("Part-time")
  applications        Application[]
  applicationSessions ApplicationSession[]
  company             User                 @relation(fields: [companyId], references: [id])
}

model Application {
  id                   String            @id @default(cuid())
  projectId            String
  status               ApplicationStatus @default(PENDING)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  additionalDocument   String?
  adminNotes           String?
  compatibilityScore   Float?
  feedback             String?
  userId               String
  whyInterested        String?
  proposedApproach     String?
  coverLetter          String?
  motivation           String?
  personalStatement    String?
  relevantExperience   String?
  projectUnderstanding String?
  weeklyAvailability   String?
  startDate            String?
  commitmentLevel      String?
  project              Project           @relation(fields: [projectId], references: [id])
  user                 User              @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model ExternalApplication {
  id            String                    @id @default(cuid())
  userId        String
  company       String
  jobTitle      String
  jobUrl        String?
  location      String?
  salary        String?
  status        ExternalApplicationStatus @default(APPLIED)
  appliedDate   DateTime
  followUpDate  DateTime?
  notes         String?
  source        String?
  contactPerson String?
  contactEmail  String?
  interviewDate DateTime?
  responseDate  DateTime?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  user          User                      @relation(fields: [userId], references: [id])

  @@index([userId, appliedDate])
}

model ApplicationSession {
  id               String                   @id @default(cuid())
  userId           String
  projectId        String
  sessionId        String                   @unique
  startedAt        DateTime                 @default(now())
  completedAt      DateTime?
  abandonedAt      DateTime?
  timeSpentMinutes Int?
  stepReached      Int                      @default(1)
  status           ApplicationSessionStatus @default(IN_PROGRESS)
  step1Completed   Boolean                  @default(false)
  step2Completed   Boolean                  @default(false)
  step3Completed   Boolean                  @default(false)
  step4Completed   Boolean                  @default(false)
  wasSaved         Boolean                  @default(false)
  wasRestored      Boolean                  @default(false)
  saveCount        Int                      @default(0)
  deviceType       String?
  browserInfo      String?
  userAgent        String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  project          Project                  @relation(fields: [projectId], references: [id])
  user             User                     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([startedAt])
  @@index([status])
}

model ApplicationAnalytics {
  id                   String   @id @default(cuid())
  userId               String
  date                 DateTime
  bidaayaApplications  Int      @default(0)
  externalApplications Int      @default(0)
  interviewsScheduled  Int      @default(0)
  responseRate         Float?
  averageResponseTime  Int?
  acceptanceRate       Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId, date])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  stripePaymentId String        @unique
  amount          Int
  currency        String        @default("usd")
  status          PaymentStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
}

model ChatQuery {
  id                 String        @id @default(cuid())
  userId             String
  sessionId          String?
  query              String
  queryType          ChatQueryType @default(GENERAL)
  intent             String?
  extractedSkills    String[]
  extractedRoles     String[]
  extractedCompanies String[]
  timestamp          DateTime      @default(now())
  userAgent          String?
  ipAddress          String?
  sessionDuration    Int?
  followUpQueries    Int           @default(0)
  clickedResults     Int           @default(0)
  savedResults       Int           @default(0)
  responseGiven      Boolean       @default(false)
  satisfaction       Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([queryType])
}

model BehavioralInsight {
  id                    String      @id @default(cuid())
  userId                String
  insightType           InsightType
  learningVelocity      Float       @default(0)
  interestDepth         Float       @default(0)
  marketAwareness       Float       @default(0)
  careerAmbition        Float       @default(0)
  geographicFlexibility Float       @default(0)
  salaryAwareness       Float       @default(0)
  peakActivityHours     String[]
  preferredTopics       String[]
  searchFrequency       Float       @default(0)
  sessionDuration       Float       @default(0)
  overallEngagement     Float       @default(0)
  predictionConfidence  Float       @default(0)
  lastCalculated        DateTime    @default(now())
  trendData             Json?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  user                  User        @relation(fields: [userId], references: [id])

  @@unique([userId, insightType])
  @@index([userId])
  @@index([lastCalculated])
}

model CompanySearch {
  id                  String    @id @default(cuid())
  companyId           String
  searchPrompt        String
  parsedIntent        Json?
  requiredSkills      String[]
  experienceLevel     String?
  educationReq        String[]
  locationPref        String[]
  industryFit         String[]
  searchTimestamp     DateTime  @default(now())
  resultsCount        Int       @default(0)
  tier                String    @default("FREE")
  maxResults          Int       @default(3)
  viewedResults       Int       @default(0)
  contactedCandidates Int       @default(0)
  successfulHires     Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  matches             AIMatch[]
  company             User      @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([searchTimestamp])
  @@index([tier])
}

model AIMatch {
  id                  String        @id @default(cuid())
  searchId            String
  studentId           String
  overallScore        Float
  profileMatchScore   Float
  engagementScore     Float
  behavioralScore     Float
  skillsAlignment     Float         @default(0)
  experienceMatch     Float         @default(0)
  educationMatch      Float         @default(0)
  locationMatch       Float         @default(0)
  interestAlignment   Float         @default(0)
  responselikelihood  Float         @default(0)
  aiExplanation       String?
  strengthsHighlight  String[]
  potentialConcerns   String[]
  recommendedApproach String?
  wasViewed           Boolean       @default(false)
  viewedAt            DateTime?
  wasContacted        Boolean       @default(false)
  contactedAt         DateTime?
  candidateResponded  Boolean       @default(false)
  respondedAt         DateTime?
  generatedAt         DateTime      @default(now())
  aiModel             String        @default("deepseek")
  processingTime      Float?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  search              CompanySearch @relation(fields: [searchId], references: [id])
  student             User          @relation(fields: [studentId], references: [id])

  @@index([searchId])
  @@index([studentId])
  @@index([overallScore])
  @@index([generatedAt])
}

enum ProjectCategory {
  MARKETING
  BUSINESS_DEVELOPMENT
  COMPUTER_SCIENCE
  FINANCE
  PSYCHOLOGY
}

enum UserRole {
  STUDENT
  COMPANY
  ADMIN
}

enum ProjectStatus {
  DRAFT
  PENDING_APPROVAL
  LIVE
  CLOSED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  INTERVIEWED
  ACCEPTED
  REJECTED
}

enum SubscriptionStatus {
  FREE
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum SubscriptionPlan {
  FREE
  STUDENT_PREMIUM
  STUDENT_PRO
  COMPANY_BASIC
  COMPANY_PREMIUM
  COMPANY_PRO
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum ExternalApplicationStatus {
  APPLIED
  UNDER_REVIEW
  PHONE_SCREEN
  INTERVIEW_SCHEDULED
  INTERVIEWED
  FINAL_ROUND
  OFFER_RECEIVED
  ACCEPTED
  REJECTED
  WITHDRAWN
  NO_RESPONSE
}

enum ApplicationSessionStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIMED_OUT
}

enum ChatQueryType {
  GENERAL
  SKILL_SEARCH
  ROLE_SEARCH
  COMPANY_RESEARCH
  SALARY_INQUIRY
  CAREER_GUIDANCE
  INTERVIEW_PREP
  INDUSTRY_TRENDS
}

enum InsightType {
  WEEKLY
  MONTHLY
  REAL_TIME
  PREDICTION
}
