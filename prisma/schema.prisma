generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String                 @unique
  emailVerified            DateTime?
  image                    String?
  role                     UserRole               @default(STUDENT)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  university               String?
  major                    String?
  graduationYear           Int?
  skills                   String[]
  companyName              String?
  companySize              String?
  industry                 String?
  bio                      String?
  goal                     String[]
  location                 String?
  mena                     Boolean?
  subjects                 String?
  terms                    Boolean?
  whatsapp                 String?
  applicationsThisMonth    Int                    @default(0)
  applicationsThisWeek     Int                    @default(0)
  calendlyLink             String?
  companyGoals             String[]
  companyOneLiner          String?
  companyRole              String?
  companyWebsite           String?
  contactEmail             String?
  contactPersonName        String?
  contactPersonType        String?
  contactWhatsapp          String?
  dateOfBirth              DateTime?
  documentsAllowed         Int                    @default(1)
  education                String?
  highSchool               String?
  interests                String[]
  lastApplicationReset     DateTime               @default(now())
  lastMonthlyReset         DateTime               @default(now())
  linkedin                 String?
  profileCompleted         Boolean                @default(false)
  onboardingPhase          String?                @default("structured_chat") // structured_chat, cv_building, complete
  referralSource           String?
  referralDetails          String?
  emailVerifiedAt          DateTime?
  profileCompletedAt       DateTime?
  phase1CompletedAt        DateTime?  // Basic profile completion (name, education status, terms)
  phase2CompletedAt        DateTime?  // Detailed education profile completion
  roleSelectedAt           DateTime?
  firstLoginAt             DateTime?
  lastActiveAt             DateTime?
  firstProjectViewAt       DateTime?
  firstApplicationAt       DateTime?
  firstProjectCreatedAt    DateTime?
  firstProjectActivatedAt  DateTime?
  subscriptionUpgradedAt   DateTime?
  signupSource             String?
  signupMedium             String?
  signupCampaign           String?
  deviceType               String?
  browserInfo              String?
  ipCountry                String?
  timezone                 String?
  sessionCount             Int                    @default(0)
  totalTimeSpent           Int                    @default(0)
  onboardingStepsCompleted String[]               @default([])
  featuresUsed             String[]               @default([])
  stripeCurrentPeriodEnd   DateTime?
  stripeCustomerId         String?                @unique
  stripePriceId            String?
  stripeSubscriptionId     String?                @unique
  subscriptionPlan         SubscriptionPlan       @default(FREE)
  subscriptionStatus       SubscriptionStatus     @default(ACTIVE)
  isExternalCompany        Boolean                @default(false)
  companySource            String?                // "signup", "admin_created", "bulk_upload"
  aiMatches                AIMatch[]
  accounts                 Account[]
  applications             Application[]
  applicationAnalytics     ApplicationAnalytics[]
  applicationSessions      ApplicationSession[]
  behavioralInsights       BehavioralInsight[]
  chatQueries              ChatQuery[]
  companySearches          CompanySearch[]
  externalApplications     ExternalApplication[]
  pageViews                PageView[]
  payments                 Payment[]
  projects                 Project[]
  sessions                 Session[]
  userSessions             UserSession[]
  studentTags              StudentTag[]
  studentVector            StudentVector?
  externalOpportunitiesCreated ExternalOpportunity[] @relation("ExternalOpportunitiesCreated")
  externalOpportunities    ExternalOpportunity[] @relation("CompanyExternalOpportunities")
  externalOpportunityApps  ExternalOpportunityApplication[]

  // Credit system
  credits                  Int                    @default(20)
  creditsRefreshDate       DateTime?
  lifetimeCreditsUsed      Int                    @default(0)
  creditTransactions       CreditTransaction[]
  
  // Early Access system (for paid tiers)
  earlyAccessUnlocksRemaining Int                 @default(0)
  earlyAccessUnlocksResetAt   DateTime?
  profileCompletionChecklist  Json?               // Stores checklist progress
  earlyAccessUnlocks       EarlyAccessUnlock[]
  opportunityFeedback      OpportunityFeedback[]
  
  // AI Chat system
  chatConversations        ChatConversation[]
  chatMessages             ChatMessage[]
  
  // CV Builder system
  cvProfile                CVProfile?
  cvEducation              CVEducation[]
  cvExperience             CVExperience[]
  cvProjects               CVProject[]
  cvCertifications         CVCertification[]
  cvLanguages              CVLanguage[]
  cvAchievements           CVAchievement[]
  cvSkills                 CVSkill[]
}

model UserSession {
  id          String    @id @default(cuid())
  userId      String
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int?
  pageViews   Int       @default(0)
  deviceType  String?
  browserInfo String?
  ipAddress   String?
  userAgent   String?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startTime])
}

model PageView {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  page      String
  timestamp DateTime @default(now())
  timeSpent Int?
  referrer  String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([page])
  @@index([timestamp])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                  String               @id @default(cuid())
  title               String
  description         String
  companyId           String
  status              ProjectStatus        @default(PENDING_APPROVAL)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  adminFeedback       String?
  applicationDeadline DateTime?
  approvedAt          DateTime?
  approvedBy          String?
  category            ProjectCategory?
  customCategory      String?              // For custom category names when category is CUSTOM
  compensation        String?
  paymentAmount       Float?
  currentApplications Int?                 @default(0)
  deliverables        String[]             @default([])
  department          String?
  duration            String?
  durationMonths      Int?                 @default(3)
  experienceLevel     String?              @default("High School")
  featured            Boolean              @default(false)
  isPremium           Boolean              @default(false)
  learningOutcomes    String[]             @default([])
  location            String?
  maxApplications     Int?                 @default(100)
  projectType         String?
  remote              Boolean              @default(false)
  requirements        String[]             @default([])
  skillsRequired      String[]             @default([])
  subcategory         String?
  teamSize            Int?                 @default(1)
  timeCommitment      String?              @default("Part-time")
  
  // Early Access system
  isNewOpportunity Boolean   @default(false)
  publishedAt      DateTime? 
  earlyAccessUntil DateTime?
  unlockCredits    Int       @default(5) // Credits required to unlock if not paid tier
  
  applications        Application[]
  applicationSessions ApplicationSession[]
  company             User                 @relation(fields: [companyId], references: [id])
  earlyAccessUnlocks  EarlyAccessUnlock[] @relation("ProjectUnlocks")
  feedback            OpportunityFeedback[] @relation("ProjectFeedback")
}

model Application {
  id                   String            @id @default(cuid())
  projectId            String
  status               ApplicationStatus @default(PENDING)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  additionalDocument   String?
  adminNotes           String?
  compatibilityScore   Float?
  feedback             String?
  userId               String
  whyInterested        String?
  proposedApproach     String?
  coverLetter          String?
  motivation           String?
  personalStatement    String?
  relevantExperience   String?
  projectUnderstanding String?
  weeklyAvailability   String?
  startDate            String?
  commitmentLevel      String?
  project              Project           @relation(fields: [projectId], references: [id])
  user                 User              @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model ExternalApplication {
  id            String                    @id @default(cuid())
  userId        String
  company       String
  jobTitle      String
  jobUrl        String?
  location      String?
  salary        String?
  status        ExternalApplicationStatus @default(APPLIED)
  appliedDate   DateTime
  followUpDate  DateTime?
  notes         String?
  source        String?
  contactPerson String?
  contactEmail  String?
  interviewDate DateTime?
  responseDate  DateTime?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  user          User                      @relation(fields: [userId], references: [id])

  @@index([userId, appliedDate])
}

model ApplicationSession {
  id               String                   @id @default(cuid())
  userId           String
  projectId        String
  sessionId        String                   @unique
  startedAt        DateTime                 @default(now())
  completedAt      DateTime?
  abandonedAt      DateTime?
  timeSpentMinutes Int?
  stepReached      Int                      @default(1)
  status           ApplicationSessionStatus @default(IN_PROGRESS)
  step1Completed   Boolean                  @default(false)
  step2Completed   Boolean                  @default(false)
  step3Completed   Boolean                  @default(false)
  step4Completed   Boolean                  @default(false)
  wasSaved         Boolean                  @default(false)
  wasRestored      Boolean                  @default(false)
  saveCount        Int                      @default(0)
  deviceType       String?
  browserInfo      String?
  userAgent        String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  project          Project                  @relation(fields: [projectId], references: [id])
  user             User                     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([startedAt])
  @@index([status])
}

model ApplicationAnalytics {
  id                   String   @id @default(cuid())
  userId               String
  date                 DateTime
  bidaayaApplications  Int      @default(0)
  externalApplications Int      @default(0)
  interviewsScheduled  Int      @default(0)
  responseRate         Float?
  averageResponseTime  Int?
  acceptanceRate       Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId, date])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  stripePaymentId String        @unique
  amount          Int
  currency        String        @default("usd")
  status          PaymentStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
}

// Credit system models
model CreditTransaction {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  type           String   // monthly_refresh, purchase, spent, refund
  action         String?  // internalApplication, companyProposal, customCV
  amount         Int      // positive for gains, negative for spending
  balanceBefore  Int
  balanceAfter   Int

  relatedId      String?  // optional foreign id (application/proposal id)
  description    String?

  createdAt      DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Singleton-like config for pricing and monthly allocations
model CreditPricing {
  id                     String   @id @default(cuid())

  // Action costs (credits)
  internalApplication    Int      @default(5)
  companyProposal        Int      @default(7)
  customCV               Int      @default(10)

  // Monthly allocations per subscription tier
  freeMonthlyCredits     Int      @default(20)
  premiumMonthlyCredits  Int      @default(100)
  proMonthlyCredits      Int      @default(200)

  updatedAt              DateTime @updatedAt
  updatedBy              String?
}

model ChatQuery {
  id                 String        @id @default(cuid())
  userId             String
  sessionId          String?
  query              String
  queryType          ChatQueryType @default(GENERAL)
  intent             String?
  extractedSkills    String[]
  extractedRoles     String[]
  extractedCompanies String[]
  timestamp          DateTime      @default(now())
  userAgent          String?
  ipAddress          String?
  sessionDuration    Int?
  followUpQueries    Int           @default(0)
  clickedResults     Int           @default(0)
  savedResults       Int           @default(0)
  responseGiven      Boolean       @default(false)
  satisfaction       Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([queryType])
}

model BehavioralInsight {
  id                    String      @id @default(cuid())
  userId                String
  insightType           InsightType
  learningVelocity      Float       @default(0)
  interestDepth         Float       @default(0)
  marketAwareness       Float       @default(0)
  careerAmbition        Float       @default(0)
  geographicFlexibility Float       @default(0)
  salaryAwareness       Float       @default(0)
  peakActivityHours     String[]
  preferredTopics       String[]
  searchFrequency       Float       @default(0)
  sessionDuration       Float       @default(0)
  overallEngagement     Float       @default(0)
  predictionConfidence  Float       @default(0)
  lastCalculated        DateTime    @default(now())
  trendData             Json?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  user                  User        @relation(fields: [userId], references: [id])

  @@unique([userId, insightType])
  @@index([userId])
  @@index([lastCalculated])
}

model CompanySearch {
  id                  String    @id @default(cuid())
  companyId           String
  searchPrompt        String
  parsedIntent        Json?
  requiredSkills      String[]
  experienceLevel     String?
  educationReq        String[]
  locationPref        String[]
  industryFit         String[]
  searchTimestamp     DateTime  @default(now())
  resultsCount        Int       @default(0)
  tier                String    @default("FREE")
  maxResults          Int       @default(3)
  viewedResults       Int       @default(0)
  contactedCandidates Int       @default(0)
  successfulHires     Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  matches             AIMatch[]
  company             User      @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([searchTimestamp])
  @@index([tier])
}

model AIMatch {
  id                  String        @id @default(cuid())
  searchId            String
  studentId           String
  overallScore        Float
  profileMatchScore   Float
  engagementScore     Float
  behavioralScore     Float
  skillsAlignment     Float         @default(0)
  experienceMatch     Float         @default(0)
  educationMatch      Float         @default(0)
  locationMatch       Float         @default(0)
  interestAlignment   Float         @default(0)
  responselikelihood  Float         @default(0)
  aiExplanation       String?
  strengthsHighlight  String[]
  potentialConcerns   String[]
  recommendedApproach String?
  wasViewed           Boolean       @default(false)
  viewedAt            DateTime?
  wasContacted        Boolean       @default(false)
  contactedAt         DateTime?
  candidateResponded  Boolean       @default(false)
  respondedAt         DateTime?
  generatedAt         DateTime      @default(now())
  aiModel             String        @default("deepseek")
  processingTime      Float?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  search              CompanySearch @relation(fields: [searchId], references: [id])
  student             User          @relation(fields: [studentId], references: [id])

  @@index([searchId])
  @@index([studentId])
  @@index([overallScore])
  @@index([generatedAt])
}

enum ProjectCategory {
  MARKETING
  BUSINESS_DEVELOPMENT
  COMPUTER_SCIENCE
  FINANCE
  PSYCHOLOGY
  CUSTOM
}

enum UserRole {
  STUDENT
  COMPANY
  ADMIN
}

enum ProjectStatus {
  DRAFT
  PENDING_APPROVAL
  LIVE
  CLOSED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  INTERVIEWED
  ACCEPTED
  REJECTED
}

enum SubscriptionStatus {
  FREE
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum SubscriptionPlan {
  FREE
  STUDENT_PREMIUM
  STUDENT_PRO
  COMPANY_BASIC
  COMPANY_PREMIUM
  COMPANY_PRO
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum ExternalApplicationStatus {
  APPLIED
  UNDER_REVIEW
  PHONE_SCREEN
  INTERVIEW_SCHEDULED
  INTERVIEWED
  FINAL_ROUND
  OFFER_RECEIVED
  ACCEPTED
  REJECTED
  WITHDRAWN
  NO_RESPONSE
}

enum ApplicationSessionStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIMED_OUT
}

enum ChatQueryType {
  GENERAL
  SKILL_SEARCH
  ROLE_SEARCH
  COMPANY_RESEARCH
  SALARY_INQUIRY
  CAREER_GUIDANCE
  INTERVIEW_PREP
  INDUSTRY_TRENDS
}

enum InsightType {
  WEEKLY
  MONTHLY
  REAL_TIME
  PREDICTION
}

// AI Database Analysis Models
model SmartTag {
  id           String   @id @default(cuid())
  category     String   // university, major, skills, etc.
  value        String   // the normalized tag value
  aliases      String[] // variations and synonyms
  frequency    Int      @default(0)
  relatedTags  String[] // related tag IDs
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  analysisRunId String?  
  analysisRun  AnalysisRun? @relation(fields: [analysisRunId], references: [id], onDelete: SetNull)
  
  // Junction table for students with this tag
  studentTags  StudentTag[]
  
  @@unique([category, value])
  @@index([category])
  @@index([frequency])
}

model StudentTag {
  id        String   @id @default(cuid())
  userId    String   
  tagId     String   
  confidence Float   @default(1.0) // how confident we are in this tag match
  source    String   @default("ai_analysis") // how this tag was assigned
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag       SmartTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tagId])
  @@index([userId])
  @@index([tagId])
}

model DatabaseInsight {
  id               String   @id @default(cuid())
  field            String   // field name analyzed
  uniqueValuesCount Int     // number of unique values
  patterns         String[] // extracted patterns
  recommendations  String[] // field-specific recommendations
  topValues        Json     // most frequent values with counts
  createdAt        DateTime @default(now())
  analysisRunId    String   
  analysisRun      AnalysisRun @relation(fields: [analysisRunId], references: [id], onDelete: Cascade)
  
  @@index([field])
  @@index([analysisRunId])
}

model AnalysisRun {
  id               String   @id @default(cuid())
  runBy            String   // user who triggered the analysis
  status           String   @default("running") // running, completed, failed
  studentsAnalyzed Int      @default(0)
  tagsGenerated    Int      @default(0)
  fieldsAnalyzed   String[] // which fields were analyzed
  recommendations  String[] // overall recommendations
  summary          Json?    // analysis summary data
  startedAt        DateTime @default(now())
  completedAt      DateTime?
  errorMessage     String?
  
  // Relations
  smartTags        SmartTag[]
  insights         DatabaseInsight[]
  
  @@index([runBy])
  @@index([status])
  @@index([startedAt])
}

// Vector Embeddings for AI Matching
model StudentVector {
  id              String   @id @default(cuid())
  userId          String   @unique
  profileVector   Json     // Main profile embedding as JSON array
  skillsVector    Json     // Skills-focused embedding 
  academicVector  Json     // Academic background embedding
  vectorVersion   String   @default("v1.0")
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([vectorVersion])
  @@index([lastUpdated])
}

model SearchVector {
  id            String   @id @default(cuid())
  companyId     String
  searchQuery   String
  queryVector   Json     // Search query embedding as JSON array
  resultsCount  Int      @default(0)
  searchType    String   @default("hybrid") // "vector", "hybrid", "rule-based"
  threshold     Float    @default(0.6)
  createdAt     DateTime @default(now())
  
  @@index([companyId])
  @@index([searchType])
  @@index([createdAt])
}

// External Opportunities (Admin-curated opportunities from external companies)
model ExternalOpportunity {
  id              String   @id @default(cuid())
  title           String
  company         String   // Display name (keep for backward compatibility)
  companyId       String?  // Link to User table (Company)
  description     String?
  location        String?
  applicationUrl  String   // External website link where students apply
  source          String?  // Where admin found it (LinkedIn, company website, etc.)
  category        String?  // Similar to project categories
  experienceLevel String?
  remote          Boolean  @default(false)
  salary          String?
  deadline        DateTime?
  isActive        Boolean  @default(true)
  isPremium       Boolean  @default(false) // For early access feature (STUDENT_PRO gets early access)
  
  // Early Access system
  isNewOpportunity Boolean   @default(false)
  publishedAt      DateTime? 
  earlyAccessUntil DateTime?
  unlockCredits    Int       @default(5) // Credits required to unlock if not paid tier
  
  // Admin fields
  addedBy         String   // Admin user ID
  addedAt         DateTime @default(now())
  updatedAt       DateTime @updatedAt
  adminNotes      String?
  
  // Analytics
  viewCount       Int      @default(0)
  clickCount      Int      @default(0)
  
  // Relations
  applications    ExternalOpportunityApplication[]
  admin           User     @relation("ExternalOpportunitiesCreated", fields: [addedBy], references: [id])
  companyUser     User?    @relation("CompanyExternalOpportunities", fields: [companyId], references: [id])
  earlyAccessUnlocks EarlyAccessUnlock[] @relation("ExternalOpportunityUnlocks")
  feedback        OpportunityFeedback[] @relation("ExternalOpportunityFeedback")
  
  @@index([isActive, isPremium])
  @@index([isNewOpportunity, publishedAt])
  @@index([category])
  @@index([addedAt])
  @@index([deadline])
  @@index([companyId])
}

// Track when students click through to apply to external opportunities
model ExternalOpportunityApplication {
  id                    String   @id @default(cuid())
  userId                String
  externalOpportunityId String
  appliedAt             DateTime @default(now())
  notes                 String?  // Optional student notes
  
  user                  User                @relation(fields: [userId], references: [id])
  opportunity           ExternalOpportunity @relation(fields: [externalOpportunityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, externalOpportunityId])
  @@index([userId])
  @@index([externalOpportunityId])
  @@index([appliedAt])
}

// AI Chat System Models
model ChatConversation {
  id          String        @id @default(cuid())
  userId      String
  title       String?       // Auto-generated from first message
  // conversationLevel Int?      @default(1) // 1 = Basics, 2 = Experience, 3 = Goals - TEMPORARILY COMMENTED OUT UNTIL MIGRATION RUNS
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastMessageAt DateTime    @default(now())
  
  user        User          @relation(fields: [userId], references: [id])
  messages    ChatMessage[]
  
  @@index([userId])
  @@index([lastMessageAt])
}

model ChatMessage {
  id              String           @id @default(cuid())
  conversationId  String
  userId          String
  role            String           // "user" | "assistant" | "system"
  content         String           @db.Text
  
  // For opportunity recommendations in chat
  opportunityType String?          // "internal" | "external" 
  opportunityIds  String[]         // IDs of recommended projects/externals
  
  // For CV generation tracking
  cvGenerated     Boolean          @default(false)
  cvData          Json?            // Store CV data if generated
  
  createdAt       DateTime         @default(now())
  
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id])
  
  @@index([conversationId])
  @@index([userId])
  @@index([createdAt])
}

// ============================================
// CV BUILDER SYSTEM MODELS
// ============================================

// Enhanced CV Profile (beyond basic User fields)
model CVProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  
  // Enhanced profile fields
  headline               String?  @db.Text  // "Software Engineer | AI Enthusiast | Python & React"
  professionalSummary    String?  @db.Text  // 2-3 sentence career summary
  portfolioLink          String?
  githubLink             String?
  
  // Work authorization & preferences
  workAuthorization      String[] // ["uk_student_visa", "uae_resident", "us_opt"]
  openToRoles            String[] // ["software_engineer", "data_analyst", "product_manager"]
  relocationPreferences  String?  @db.Text // "Open to relocation within UAE, remote work preferred"
  
  // Career preferences
  preferredIndustries    String[] // ["fintech", "ai", "ecommerce"]
  preferredCompanyStages String[] // ["startup", "scaleup", "enterprise"]
  preferredWorkStyle     String?  // "remote", "hybrid", "in_office"
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

// Education history (multiple degrees, courses, certifications)
model CVEducation {
  id                    String   @id @default(cuid())
  userId                String
  
  // Core details
  degreeType            String   // "bsc", "msc", "a_levels", "diploma", "bootcamp", "short_course"
  degreeTitle           String   // "BSc in Economics and Politics"
  fieldOfStudy          String   // "Economics", "Computer Science", "Business"
  institution           String   // "University College London"
  institutionLocation   String?  // "London, UK"
  
  // Dates
  startDate             DateTime
  endDate               DateTime?
  isCurrent             Boolean  @default(false)
  
  // Academic performance
  predictedGrade        String?  // "First Class Honours", "A*"
  finalGrade            String?  // Actual grade after completion
  gpa                   Float?   // 3.8, 4.0, etc.
  
  // Additional details
  modules               String[] // ["Econometrics", "Game Theory", "Data Science"]
  courseworkHighlights  String[] // ["Dissertation on FinTech Innovation (Grade: 85%)"]
  honorsAwards          String[] // ["Dean's List 2023", "Academic Excellence Award"]
  
  // Rich description for vector embedding
  description           String?  @db.Text  // Free-form description
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([startDate])
  @@index([degreeType])
}

// Work experience (jobs, internships, freelance)
model CVExperience {
  id                String   @id @default(cuid())
  userId            String
  
  // Core details
  title             String   // "Operations Manager Intern"
  employer          String   // "Revolut"
  orgType           String?  // "startup", "scaleup", "enterprise", "bank", "ngo"
  location          String?  // "Dubai, UAE" or "Remote"
  employmentType    String   // "internship", "full_time", "part_time", "contract", "freelance"
  
  // Dates
  startDate         DateTime
  endDate           DateTime?
  isCurrent         Boolean  @default(false)
  
  // Description
  summary           String?  @db.Text  // 1-2 sentence role description
  
  // Relations
  user    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  impacts CVExperienceImpact[]   // One-to-many: multiple achievements per role
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([startDate])
  @@index([employmentType])
}

// Impact statements for work experience (with metrics)
model CVExperienceImpact {
  id           String @id @default(cuid())
  experienceId String
  
  // Achievement
  statement    String @db.Text // "Reduced processing time by 40%"
  metrics      Json?  // [{ value: 40, unit: "%" }, { value: 100, unit: "hours_saved" }]
  skillsUsed   String[] // ["python", "data_analysis", "process_optimization"]
  evidenceLinks String[] // Optional links to proof/portfolio
  
  // STAR format (optional, for interview prep)
  starSituation String? @db.Text
  starTask      String? @db.Text
  starAction    String? @db.Text
  starResult    String? @db.Text
  
  experience CVExperience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([experienceId])
}

// Personal projects, side hustles, entrepreneurial ventures
model CVProject {
  id          String @id @default(cuid())
  userId      String
  
  // Core details
  name        String   // "Bidaaya"
  role        String?  // "Co-Founder & Lead Developer"
  summary     String?  @db.Text
  techStack   String[] // ["Next.js", "React", "Prisma", "OpenAI"]
  
  // Dates
  startDate   DateTime?
  endDate     DateTime?
  isCurrent   Boolean @default(false)
  
  // Links
  projectUrl  String?
  githubUrl   String?
  
  // Relations
  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  impacts CVProjectImpact[] // One-to-many: multiple achievements per project
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

// Impact statements for projects
model CVProjectImpact {
  id        String @id @default(cuid())
  projectId String
  
  statement   String @db.Text // "Grew user base to 1,500+ students in 7 months"
  metrics     Json?  // [{ value: 1500, unit: "users" }]
  skillsUsed  String[]
  
  project CVProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([projectId])
}

// Certifications and courses
model CVCertification {
  id            String @id @default(cuid())
  userId        String
  
  name          String   // "SEO Mastery Course"
  issuer        String   // "Udemy", "Coursera", "HKU"
  credentialId  String?  // "UC-abc123xyz"
  credentialUrl String?  // Link to certificate
  
  issueDate     DateTime
  expiryDate    DateTime?
  
  // Description
  description   String? @db.Text
  skillsGained  String[] // ["seo", "google_analytics", "content_marketing"]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([issueDate])
}

// Languages spoken
model CVLanguage {
  id                String @id @default(cuid())
  userId            String
  
  language          String // "English", "Arabic", "French"
  proficiencyLevel  String // "native", "fluent", "professional", "intermediate", "basic"
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, language])
  @@index([userId])
}

// Leadership, volunteering, awards, extracurriculars
model CVAchievement {
  id          String @id @default(cuid())
  userId      String
  
  type        String   // "leadership", "volunteering", "award", "competition", "extracurricular"
  name        String   // "Team Lead - HSBC DeFi Challenge"
  organization String? // "HSBC", "University Society"
  date        DateTime
  description String?  @db.Text
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([date])
}

// Skills with proficiency levels
model CVSkill {
  id           String @id @default(cuid())
  userId       String
  
  skillName    String   // "Python", "Leadership", "Figma"
  category     String   // "hard_skill", "soft_skill", "tool", "language"
  proficiency  String?  // "beginner", "intermediate", "advanced", "expert"
  evidenceUrl  String?  // Portfolio/GitHub link demonstrating skill
  
  // Context
  yearsOfExperience Float? // 2.5 years
  lastUsed          DateTime? // When they last used this skill
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, skillName])
  @@index([userId])
  @@index([category])
  @@index([proficiency])
}

// Early Access Unlock Tracking
model EarlyAccessUnlock {
  id                    String   @id @default(cuid())
  userId                String
  opportunityId         String
  opportunityType       String   // "project" or "external"
  projectId             String?
  externalOpportunityId String?
  
  unlockedAt            DateTime @default(now())
  usedCredit            Boolean  @default(false) // Whether credits were used or subscription unlock
  
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  project               Project?            @relation("ProjectUnlocks", fields: [projectId], references: [id], onDelete: Cascade)
  externalOpportunity   ExternalOpportunity? @relation("ExternalOpportunityUnlocks", fields: [externalOpportunityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, opportunityId])
  @@index([userId])
  @@index([projectId])
  @@index([externalOpportunityId])
  @@index([unlockedAt])
}

// Opportunity Feedback System
model OpportunityFeedback {
  id                    String   @id @default(cuid())
  userId                String
  opportunityId         String
  opportunityType       String   // "project" or "external"
  projectId             String?
  externalOpportunityId String?
  
  mismatchType          String   // "degree", "experience", "skill", "location", "other"
  mismatchDetails       String?  // Specific details about the mismatch
  additionalComments    String?  // Optional additional feedback
  
  createdAt             DateTime @default(now())
  
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  project               Project?            @relation("ProjectFeedback", fields: [projectId], references: [id], onDelete: Cascade)
  externalOpportunity   ExternalOpportunity? @relation("ExternalOpportunityFeedback", fields: [externalOpportunityId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([projectId])
  @@index([externalOpportunityId])
  @@index([mismatchType])
  @@index([createdAt])
}
